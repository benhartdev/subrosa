const mongoose = require("mongoose");
const dotenv = require("dotenv");
dotenv.config();

// Connexion MongoDB
mongoose.connect(process.env.MONGO_URI, {
  dbName: "subrosa", // üëâ adapte si besoin
})
  .then(() => {
    console.log("‚úÖ Connect√© √† MongoDB");
    checkArtistWorksConsistency();
  })
  .catch((err) => console.error("‚ùå Connexion √©chou√©e :", err));

// Mod√®les
const Artist = require("../src/models/Artists");
const Work = require("../src/models/work");

async function checkArtistWorksConsistency() {
  try {
    const artists = await Artist.find({});
    const allWorks = await Work.find({});

    console.log(`üßë‚Äçüé® Artistes trouv√©s : ${artists.length}`);
    console.log(`üñºÔ∏è ≈íuvres trouv√©es : ${allWorks.length}\n`);

    for (const artist of artists) {
      const artistIdStr = artist._id.toString();
      const artistWorksInDB = allWorks.filter(w => w.artistId?.toString() === artistIdStr);
      const artistWorksRefs = artist.works?.map(id => id.toString()) || [];

      const missingRefs = artistWorksInDB
        .map(w => w._id.toString())
        .filter(id => !artistWorksRefs.includes(id));

      const nonexistentRefs = artistWorksRefs
        .filter(id => !allWorks.find(w => w._id.toString() === id));

      console.log(`üßë‚Äçüé® ${artist.username} (${artist._id.toString().slice(0, 7)}...)`);

      if (missingRefs.length === 0 && nonexistentRefs.length === 0) {
        console.log(`‚úÖ Tout est coh√©rent`);
      } else {
        if (missingRefs.length > 0) {
          console.log(`‚ùå Travaux pr√©sents en BDD mais pas r√©f√©renc√©s chez l‚Äôartiste :`, missingRefs);
        }
        if (nonexistentRefs.length > 0) {
          console.log(`‚ö†Ô∏è Travaux r√©f√©renc√©s mais inexistants :`, nonexistentRefs);
        }
      }

      console.log(`--------------------------`);
    }

    process.exit(0);
  } catch (err) {
    console.error("‚ùå Erreur lors de la v√©rification :", err);
    process.exit(1);
  }
}
